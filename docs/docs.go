// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Aditya Gocendra",
            "email": "gocendra123@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/comments": {
            "post": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To create comment, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                ],
                "summary": "Create Comment",
                "parameters": [
                    {
                        "description": "create comment",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CommentReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CommentRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/comments/": {
            "get": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To get comment, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                ],
                "summary": "Get Comments",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.GetCommentRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/comments/{commentid}": {
            "put": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To update comment, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                ],
                "summary": "Update Comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "commentid",
                        "name": "commentid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "udpate comment",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCommentReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePhotoRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To delete comment, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                ],
                "summary": "Delete Comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "commentid",
                        "name": "commentid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/photos/": {
            "get": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To get photos, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "photo"
                ],
                "summary": "Get Photo",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetPhotoRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To create photo, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "photo"
                ],
                "summary": "Create Photo",
                "parameters": [
                    {
                        "description": "create user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PhotoReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePhotoRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/photos/{photoid}": {
            "put": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To update photos, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "photo"
                ],
                "summary": "Update Photo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "photoid",
                        "name": "photoid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "update photo",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PhotoReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePhotoRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To delete photos, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "photo"
                ],
                "summary": "Delete Photo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "photoid",
                        "name": "photoid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/socialmedias/": {
            "get": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To get social media, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "social_media"
                ],
                "summary": "Get Social Media",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.GetSocialMediaRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To create social media, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "social_media"
                ],
                "summary": "Create Social Media",
                "parameters": [
                    {
                        "description": "create social media",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SocialMediaReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateSocialMediaRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/socialmedias/{socialMediaId}": {
            "put": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To update social media, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "social_media"
                ],
                "summary": "Update Social Media",
                "parameters": [
                    {
                        "type": "string",
                        "description": "socialMediaId",
                        "name": "socialMediaId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "update social media",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SocialMediaReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateSocialMediaRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To delete social media, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "social_media"
                ],
                "summary": "Delete Social Media",
                "parameters": [
                    {
                        "type": "string",
                        "description": "socialMediaId",
                        "name": "socialMediaId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/users/": {
            "delete": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To delete your account data, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Login your account after register",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "description": "create user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserLoginReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.UserLoginRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "User registration, your password is stored securely because it has gone through the encryption process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register User",
                "parameters": [
                    {
                        "description": "create user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserCreateReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.UserCreateRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer \u003cJWT\u003e": []
                    }
                ],
                "description": "Note : To change your account data, you need to send the token that has been obtained from the login response with the format Bearer \u003cYOUR TOKEN\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "create user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserUpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserUpdateRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CommentPhotoRes": {
            "type": "object",
            "properties": {
                "caption": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "photoUrl": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "dto.CommentReq": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "photo_id": {
                    "type": "integer"
                }
            }
        },
        "dto.CommentRes": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "photoID": {
                    "type": "integer"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "dto.CommentUserRes": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.CreatePhotoRes": {
            "type": "object",
            "properties": {
                "caption": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "photoUrl": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateSocialMediaRes": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "socialMediaUrl": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "dto.ErrorMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "typeError": {
                    "type": "string"
                }
            }
        },
        "dto.GetCommentRes": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "photo": {
                    "$ref": "#/definitions/dto.CommentPhotoRes"
                },
                "photoID": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/dto.CommentUserRes"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "dto.GetPhotoRes": {
            "type": "object",
            "properties": {
                "caption": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "photoUrl": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/dto.PhotoUserRes"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "dto.GetSocialMediaRes": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "socialMediaUrl": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/dto.SocialMediaUserRes"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "dto.PhotoReq": {
            "type": "object",
            "properties": {
                "caption": {
                    "type": "string"
                },
                "photo_url": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.PhotoUserRes": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.SocialMediaReq": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "social_media_url": {
                    "type": "string"
                }
            }
        },
        "dto.SocialMediaUserRes": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "profileImageUrl": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.SuccessMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateCommentReq": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.UpdatePhotoRes": {
            "type": "object",
            "properties": {
                "caption": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "photoUrl": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdateSocialMediaRes": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "socialMediaUrl": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "dto.UserCreateReq": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UserCreateRes": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UserLoginReq": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.UserLoginRes": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.UserUpdateReq": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UserUpdateRes": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer \u003cJWT\u003e": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Final Project API",
	Description:      "This is a assignment for DTS-Hacktiv8 final project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
